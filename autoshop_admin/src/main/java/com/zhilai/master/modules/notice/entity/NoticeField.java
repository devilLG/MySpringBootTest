package com.zhilai.master.modules.notice.entity;	import com.zhilai.master.common.persistence.DataEntity;import com.zhilai.master.common.utils.DateUtils;import com.zhilai.master.common.utils.excel.annotation.ExcelField;/** *  *Title:NoticeField *Description:公共通知模板实体类 *@author ChengJiawei *@date 2018年4月20日 下午2:15:01 * */public class NoticeField extends DataEntity<NoticeField> {		private static final long serialVersionUID = 1L;		private String logid;	//	记录编号	private String field_code;	//	字段编码(模板内容引用此字段，格式#{})	private String main_type;	//	业务类型 01:销售订单 02:站点监控 03:工单服务 04:站点库存 05:站点补货 06:站点换货 07:站点盘点 08:人员注册以及更新 09:对账单	private String table_name;	//	数据库表名称(引用数据库字典配置成按管理台信息展示，例如给客户选择销售订单，则此字段值是as_order_apply)	private String field_name;	//	数据库字段名称(引用数据库字典配置成按管理台信息展示，根据table_name选择表字段)	private String field_desc;	//	描述	private String create_time;	//	创建时间		public String getLogid() {		return logid;	}	public void setLogid(String logid) {		this.logid = logid == null ? null : logid.trim();	}	@ExcelField(title="模板字段名称", sort=1)	public String getField_code() {		return field_code;	}	public void setField_code(String field_code) {		this.field_code = field_code;	}	@ExcelField(title="业务类型", sort=2 , dictType="mainType")	public String getMain_type() {		return main_type;	}	public void setMain_type(String main_type) {		this.main_type = main_type;	}	@ExcelField(title="数据库表名称", sort=3 )	public String getTable_name() {		return table_name;	}	public void setTable_name(String table_name) {		this.table_name = table_name;	}	@ExcelField(title="数据库字段名称", sort=4 )	public String getField_name() {		return field_name;	}	public void setField_name(String field_name) {		this.field_name = field_name;	}	@ExcelField(title="描述", sort=5)	public String getField_desc() {		return field_desc;	}	public void setField_desc(String field_desc) {		this.field_desc = field_desc;	}	@ExcelField(title="创建时间", sort=6)	public String getCreate_time() {		return create_time;	}	public void setCreate_time(String create_time) {		this.create_time = create_time;	}	public static long getSerialversionuid() {		return serialVersionUID;	}			/**	 * 插入之前执行方法，需要手动调用	 */	@Override	public void preInsert(){		// 不限制ID为UUID，调用setIsNewRecord()使用自定义ID		if (!this.isNewRecord){			setLogid(System.nanoTime()+"");		}		this.create_time = DateUtils.getDateTime();	}		}